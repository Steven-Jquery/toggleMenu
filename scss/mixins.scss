// --------------------------------------------------
// Flexbox SASS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------
@mixin flexbox($important: no) {
  @if $important == yes{
    display: -webkit-box !important;
    display: -ms-flexbox !important;
    display: -moz-box !important;
    display: -webkit-flex !important;
    display: flex !important;
  }
  @else {
    display: -webkit-box;
    display: -ms-flexbox;
    display: -moz-box;
    display: -webkit-flex;
    display: flex;
  }
}

// Flexbox display
@mixin flex-inline() {
	display: -ms-inline-flexbox;
	display: inline-flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
  -webkit-box-flex: $values;
  -moz-box-flex: $values;
  -webkit-flex: $values;
  -ms-flex: $values;
  flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
  -moz-flex-direction: $direction;
  -ms-flex-direction: $direction;
  flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  -webkit-flex-wrap: $wrap;
  -moz-flex-wrap: $wrap;
  -ms-flex-wrap: $wrap;
  flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
  -webkit-flex-flow: $flow;
  -moz-flex-flow: $flow;
  -ms-flex-flow: $flow;
  flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
  -webkit-box-ordinal-group: $val;
  -moz-box-ordinal-group: $val;
  -ms-flex-order: $val;
  -webkit-order: $val;
  order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
  -webkit-flex-grow: $grow;
  -moz-flex-grow: $grow;
  -ms-flex-grow: $grow;
  flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number>
@mixin flex-shrink($shrink) {
  -webkit-flex-shrink: $shrink;
  -moz-flex-shrink: $shrink;
  -ms-flex-shrink: $shrink;
  flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width>
@mixin flex-basis($width) {
  -webkit-flex-basis: $width;
  -moz-flex-basis: $width;
  -ms-flex-basis: $width;
  flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($justify) {
  -webkit-justify-content: $justify;
  -moz-justify-content: $justify;
  -ms-justify-content: $justify;
  justify-content: $justify;
  -ms-flex-pack: $justify;
}

// - applies to: user select
// none | auto | text | contain | all
@mixin user-select($usersec) {
  -webkit-user-select: $usersec;
  -khtml-user-select: $usersec;
  -moz-user-select: $usersec;
  -ms-user-select: $usersec;
  user-select: $usersec;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($align) {
  -webkit-align-content: $align;
  -moz-align-content: $align;
  -ms-align-content: $align;
  align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($align) {
  -webkit-align-items: $align;
  -moz-align-items: $align;
  -ms-align-items: $align;
  align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($align) {
  -webkit-align-self: $align;
  -moz-align-self: $align;
  -ms-align-self: $align;
  align-self: $align;
}

//set box-sizing
@mixin box-sizing($boxmodel){
  -webkit-box-sizing:$boxmodel;
  -moz-box-sizing:$boxmodel;
  -o-box-sizing:$boxmodel;
  box-sizing:$boxmodel;
}

//set border-radius
@mixin border-radius($radius...) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

//set box-shadow
@mixin box-shadow($shadow...){
  -webkit-box-shadow:$shadow;
  -moz-box-shadow:$shadow;
  -o-box-shadow:$shadow;
}

//Set appearance
@mixin appearance($appearance){
    -webkit-appearance: $appearance;
    -moz-appearance: $appearance;
    appearance: $appearance;
}

//set text-shadow
@mixin text-shadow($shadow){
  -webkit-box-shadow:$shadow;
  -moz-box-shadow:$shadow;
  -o-box-shadow:$shadow;
}

/* Animation */
@mixin transition($transition...){
  -webkit-transition:$transition;
  -moz-transition:$transition;
  -o-transition:$transition;
  transition:$transition;
}

// generic transform
@mixin transform($transforms) {
     -moz-transform: $transforms;
       -o-transform: $transforms;
      -ms-transform: $transforms;
  -webkit-transform: $transforms;
          transform: $transforms;
}
// rotate
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}
 
// scale
@mixin scale($scale) {
   @include transform(scale($scale));
} 
// translate
@mixin translate ($x, $y) {
   @include transform(translate($x, $y));
}
// skew
@mixin skew ($x, $y) {
   @include transform(skew(#{$x}deg, #{$y}deg));
}

/*===Arrow Type 1===*/
  @mixin arrow($direction, $size, $color) {
  content: ''; // ensures the arrows are visible

  // ensures the size of the arrows is correct:
  width: 0;
  height: 0;

  // Lists for positions/directions
  $directions: ('down', 'left', 'up', 'right');
  $positions: ('top', 'right', 'bottom', 'left');

  // Loop through each position
  @each $position in $positions {
    // Calculate the index of the position in the list
    $index: index($positions, $position);

    // If the position matches the direction, render a colored border
    @if nth($directions, $index) == $direction {
      border-#{$position}: $size solid $color;
    } @else {
      border-#{$position}: $size solid transparent;
    }
  }
}

/*===Arrow Type 2===*/
@mixin arrow-light($width, $height, $size, $color, $degree) {
    content: ""; // ensures the arrows are visible
    width: #{$width}px;
    height: #{$height}px;
    border-right: #{$size}px solid $color;
    border-bottom: #{$size}px solid $color;
    -webkit-transform: rotate(#{$degree}deg);
    -ms-transform: rotate(#{$degree}deg);
    -o-transform: rotate(#{$degree}deg);
    transform: rotate(#{$degree}deg);
}
/*===List column items===*/
@mixin n-col($class, $child, $gutter, $max-cols) {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
    margin-left: -#{$gutter}px;
    @if $class == true{
        .#{$child} {
            margin-left: #{$gutter}px;
            width: calc(100% * (1/#{$max-cols}) - #{$gutter}px);
        }
    } @else{
        #{$child} {
            margin-left: #{$gutter}px;
            width: calc(100% * (1/#{$max-cols}) - #{$gutter}px);
        }
    }

}

@mixin line-clamp($row){
  display: -webkit-box;
  -webkit-line-clamp: $row;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

